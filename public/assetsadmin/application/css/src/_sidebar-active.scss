//the active white arrow pointing to active element (good for dark sidebars)
@if $sidebar-active-arrow = true {
.nav.has-active-arrow {

    $arrow-size: map-get($sidebar-common, 'arrow-size');

    .nav-item.active > .nav-link::after {
        content: "";
        display: none;
        position: absolute;
        z-index: 0;

        width: 0;
        height: 0;
        margin: 0;

        right: 0;
        top: calc(50% - #{$arrow-size});

        border-right: $arrow-size solid #fff;
        border-left: none;
        border-top:  $arrow-size solid transparent;
        border-bottom: $arrow-size solid transparent;
    }
    .nav-item.active:not(.open) > .nav-link::after {
        display: block;
    }
    .nav-item.active.open .nav-item.active:not(.open) > .nav-link::after {
        display: block;
    }
    .nav-item.active:not(.open) .nav-item.active:not(.open) > .nav-link::after {
        display: none;
    }

    @include media-breakpoint-up($sidebar-desktop-min-width) {
        //for collapsed sidebar
       @if $expandable == true {
        @at-root .sidebar.expandable {
            
            &:not(.collapsed).toggling .nav.has-active-arrow > .nav-item.active:not(.open) > .nav-link,//needed when $highlight-only-top is true in a theme (so that when expanding sidebar, highlight is not full .nav-item height)
            &.collapsed.toggling .nav.has-active-arrow > .nav-item > .nav-link {
                position: static;
                //because .nav-link's width is 16rem(full size sidebar) and therefore active arrow won't be visible when sidebar is collapsed
                //so we make the arrow's position relative to .nav-item (which is 4.5rem wide when collapsed)
            }
            &.sidebar-spaced:not(.collapsed) , &.sidebar-spaced.toggling {
                .nav.has-active-arrow .nav-item.active > .nav-link::after {
                    display: none !important;
                }
            }
        
            &.collapsed {
        
                &:not(.toggling) {
                    .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                        right: auto !important;
                        left: map-get($sidebar-common, 'collapsed-width') - map-get($sidebar-common, 'arrow-size');
                        left: calc( var(--sidebar-collapsed-width) - #{map-get($sidebar-common, 'arrow-size')} );
                    }

                    &.sidebar-spaced .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                        margin-left: calc( #{-1*map-get($sidebar-common, 'spaced') * 0.25} - 2px );//2px to account for .nav-item border
                    }
                }
                
        
                .nav.has-active-arrow .nav-item .nav-item > .nav-link::after {
                    display: none !important;
                }
                
                .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                    @include transition(visibility 0s $expandable-hide-delay + $expandable-transition-duration);
        
                    display: block;
                }
                .sidebar-inner:hover , .sidebar-inner.has-focus {
                    .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                        visibility: hidden;
                        transition-delay: $expandable-show-delay;
                    }
                }
                @if $sidebar-focus-expand == true {
                    .sidebar-inner:focus-within {
                        .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                            visibility: hidden;
                            transition-delay: $expandable-show-delay;
                        }
                    }
                }
        
            }
         }
        }//@if expandable


        //for hoverable
        @if $hoverable == true {
         @at-root .sidebar.hoverable.collapsed {
            .nav.has-active-arrow > .nav-item.active > .nav-link::after {
                display: block;
                right: -1px;//so that it appears a little smaller (when sidebar is collapsed)
            }
        
            .nav.has-active-arrow .nav-item .nav-item.active > .nav-link::after {
                display: none !important;
            }    
         }
        }
    }//media

    //for mobile sidebar don't show white active arrow
    @include media-breakpoint-down($sidebar-mobile-max-width) {
        @at-root .sidebar:not(.sidebar-push) .nav.has-active-arrow .nav-item.active > .nav-link::after {
            display: none !important;
        }
    }//media

}//.nav.has-active-arrow

}//@if $sidebar-active-arrow

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

//highlight border on active item
@if $sidebar-active-border == true {
.nav.has-active-border {
    //highlight the active .nav-item
    > .nav-item.active::before {
        //content: "";
        //display: none;

        position: absolute;
        z-index: 1;

        left: 0;
        top: 0;
        bottom: 0;

        border: 0px solid transparent;
        border-left-width: $sidebar-active-border-width;
    }
    > .nav-item.active[class*="brc-"]::before {
        border-left-color: inherit;
    }


    //or only highlight the active .nav-link
    .nav-item.active > .nav-link::before {
        //content: "";
        //display: none;

        position: absolute;
        z-index: 1;

        left: 0;
        top: 0;
        bottom: 0;

        border: 0px solid transparent;
        border-left-width: $sidebar-active-border-width;
    }
    > .nav-item.active[class*="brc-"] {
        .nav-link, .nav-link::before, .submenu, .submenu-inner, .nav-item {
            border-left-color: inherit;
        }
    }


    //don't show border when item is open
    .nav-item.active.open > .nav-link::before {
        display: none;
    }
    //don't show it when parent is being closed
    .nav-item.active:not(.open) .nav-item > .nav-link::before {
        display: none;
    }



    @if $expandable == true {
        @include media-breakpoint-up($sidebar-desktop-min-width) {
            //the active link highlight
            @at-root .sidebar.expandable.collapsed .sidebar-inner {
                .nav.has-active-border > .nav-item.active > .nav-link::before {
                    display: block;
                }
                &.is-hover, &.has-focus {
                    //hide the active border when .nav-item is .open
                    .nav.has-active-border > .nav-item.active.open > .nav-link::before {
                        visibility: hidden;
                    }
                    .nav.has-active-border > .nav-item.active:not(.open) > .nav-link::before {
                        visibility: visible;
                    }
                }

                @if $sidebar-focus-expand == true {
                    &:focus-within {
                        //hide the active border when .nav-item is .open
                        .nav.has-active-border > .nav-item.active.open > .nav-link::before {
                            visibility: hidden;
                        }
                        .nav.has-active-border > .nav-item.active:not(.open) > .nav-link::before {
                            visibility: visible;
                        }
                    }
                }
            }
        }//@media
    }

    &.active-on-top {//only first level item has the active border indicator
        .nav-item.active::before {
            display: none !important;
        }
        .nav-item.active > .nav-link::before {
            display: block !important;
            visibility: visible !important;//to override .expandable transitions and delays that make it visible/invisible
        }
        .nav-item .nav-item.active > .nav-link::before {
            display: none !important;
        }
    }

    //for hoverable, it should be like 'active-on-top' as well
    @if $hoverable == true {
        @include media-breakpoint-up($sidebar-desktop-min-width) {
            @at-root  .sidebar.hoverable.collapsed {
                .nav.has-active-border {
                    //> .nav-item.active::before {
                        //display: none !important;
                    //}
                    > .nav-item.active > .nav-link::before {
                        display: block !important;
                        visibility: visible !important;//to override .expandable transitions and delays that make it visible/invisible
                    }
                    .nav-item .nav-item.active > .nav-link::before {
                        display: none !important;
                    }
                }
            }
        }
    }



    //@at-root .sidebar-color .nav.has-active-border {
    //    > .nav-item.active::before,
    //    .nav-item > .nav-link::before
    //    {
    //        left: 1px;
    //    }
    //}

    //show highlight border on right
    &.active-on-right {
        .nav-item.active > .nav-link::before,
        > .nav-item.active::before {
            left: auto !important;
            right: $sidebar-active-border-right-offset;
        }
    }
    //highlight border on right position for for collapsed sidebar
    @include media-breakpoint-up($sidebar-desktop-min-width) {
        @at-root .collapsed:not(.toggling) .sidebar-inner:not(.is-hover) .nav.active-on-right {
            .nav-item.active > .nav-link::before,
            > .nav-item.active::before {
                left: map-get($sidebar-common, 'collapsed-width') !important;
                left: var(--sidebar-collapsed-width) !important;
                margin-left: calc(#{-1 * $sidebar-active-border-width} - #{$sidebar-active-border-right-offset});
                right: auto;
            }
        }
    }

}

//hide highlight and active arrow for collapsed hoverable dark sidebars
@if $sidebar-active-arrow = true {
 .sidebar-spaced {
    .nav.has-active-arrow .nav-item.active > .nav-link::after {
        display: none !important;
    }
 }
}
@if $hoverable == true and $sidebar-active-border == true {
 @include media-breakpoint-up($sidebar-desktop-min-width) {
    .sidebar-spaced.sidebar-color.hoverable.collapsed {
        .nav.has-active-border > .nav-item.active > .nav-link::before {
            display: none !important;
        }
    }
 }
}


//when not inside move border a little insider, to become more visible
@include media-breakpoint-up(breakpoint-next($container-max-width)) {
    .body-container:not(.container) .sidebar:not(.sidebar-spaced)
    {
        .nav.has-active-border {
            > .nav-item.active::before,
            .nav-item > .nav-link::before {
                left: 1px;//for better visibility
            }
        }
    }
}
@include media-breakpoint-down($sidebar-mobile-max-width) {
    .sidebar
    {
        .nav.has-active-border {
            > .nav-item.active::before,
            .nav-item > .nav-link::before
            {
                left: 1px;//for better visibility
            }
        }
    }
}


}//@if $sidebar-active-border 

/////////////////

//the white borders when opening submenu
///sidebar
/**
.nav.has-open-indicator {
    > .nav-item > .submenu::before,
    > .nav-item > .submenu::after {
        content: "";
        display: none;

        width: 0;
        height: 0;

        position: absolute;
        top: -1px;
        left: 0;
        right: 0;

        margin-left: auto;
        margin-right: auto;
        
        border-top: 1px solid rgba(255, 255, 255, 0.4);

        @include transition(width $transition-general);
    }
    > .nav-item.open > .submenu::before,
    > .nav-item.open > .submenu::after {
        width: calc(100% - 2rem);
    }
    > .nav-item > .submenu::after {
        transition: none;
        top: auto;
        bottom: -1px;
    }
}
*/